syntax on

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Local dirs
if !has('win32')
  set backupdir=$ZSH/caches/vim
  set directory=$ZSH/caches/vim
  set undodir=$ZSH/caches/vim
  let g:netrw_home = expand('$ZSH/caches/vim')
endif

" Create vimrc autocmd group and remove any existing vimrc autocmds,
" in case .vimrc is re-sourced.
augroup vimrc
  autocmd!
augroup END

" Visual settings
set cursorline " Highlight current line
set number " Enable line numbers.
set showtabline=2 " Always show tab bar.
set title " Show the filename in the window titlebar.
set nowrap " Do not wrap lines.
set noshowmode " Don't show the current mode (airline.vim takes care of us)
set laststatus=2 " Always show status line

" Make it obvious where 80 characters is
set textwidth=80

" Scrolling
set scrolloff=3 " Start scrolling three lines before horizontal border of window.
set sidescrolloff=3 " Start scrolling three columns before vertical border of window.

" Indentation
set autoindent " Copy indent from last line when starting new line.
set shiftwidth=2 " The # of spaces for indenting.
set smarttab " At start of line, <Tab> inserts shiftwidth spaces, <Bs> deletes shiftwidth spaces.
set softtabstop=2 " Tab key results in 2 spaces
set tabstop=2 " Tabs indent only 2 spaces
set expandtab " Expand tabs to spaces

" Reformatting
set nojoinspaces " Only insert single space after a '.', '?' and '!' with a join command.

" Extra whitespace
autocmd vimrc BufWinEnter * :2match ExtraWhitespaceMatch /\s\+$/
autocmd vimrc InsertEnter * :2match ExtraWhitespaceMatch /\s\+\%#\@<!$/
autocmd vimrc InsertLeave * :2match ExtraWhitespaceMatch /\s\+$/

" Search / replace
set gdefault " By default add g flag to search/replace. Add g to toggle.
set hlsearch " Highlight searches
set incsearch " Highlight dynamically as pattern is typed.
set ignorecase " Ignore case of searches.
set smartcase " Ignore 'ignorecase' if search pattern contains uppercase characters.

" Ignore things
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/bower_components/*,*/node_modules/*
set wildignore+=*/vendor/*,*/.git/*,*/.hg/*,*/.svn/*,*/log/*,*/tmp/*

" Vim commands
set hidden " When a buffer is brought to foreground, remember undo history and marks.
set report=0 " Show all changes.
set mouse=a " Enable mouse in all modes.
set shortmess+=I " Hide intro menu.

" Splits
set splitbelow " New split goes below
set splitright " New split goes right

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" When editing a file, always jump to the last known cursor position. Don't do
" it for commit messages, when the position is invalid, or when inside an event
" handler (happens when dropping a file on gvim).
autocmd vimrc BufReadPost *
  \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

" F12: Source .vimrc & .gvimrc files
nmap <F12> :call SourceConfigs()<CR>

if !exists("*SourceConfigs")
  function! SourceConfigs()
    let files = ".vimrc"
    source $MYVIMRC
    if has("gui_running")
      let files .= ", .gvimrc"
      source $MYGVIMRC
    endif
    echom "Sourced " . files
  endfunction
endif

" vim
autocmd vimrc BufRead .vimrc,*.vim set keywordprg=:help

" markdown
autocmd vimrc BufRead,BufNewFile *.md set filetype=markdown

" PLUGINS

" NERDTree
let NERDTreeShowHidden = 1
let NERDTreeMouseMode = 2
map <leader>n :NERDTreeToggle<CR>
autocmd vimrc StdinReadPre * let s:std_in=1
" If no file or directory arguments are specified, open NERDtree.
" If a directory is specified as the only argument, open it in NERDTree.
autocmd vimrc VimEnter *
  \ if argc() == 0 && !exists("s:std_in") |
  \   NERDTree |
  \ elseif argc() == 1 && isdirectory(argv(0)) |
  \   bd |
  \   exec 'cd' fnameescape(argv(0)) |
  \   NERDTree |
  \ end

" CtrlP.vim
map <leader>p <C-P>
map <leader>r :CtrlPMRUFiles<CR>
"let g:ctrlp_match_window_bottom = 0 " Show at top of window

" Indent Guides
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" Mustache/handlebars
let g:mustache_abbreviations = 1

if has('vim_starting')
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
  endif
endif

" https://github.com/junegunn/vim-plug
" Reload .vimrc and :PlugInstall to install plugins.
call plug#begin('~/.vim/plugged')
" Tailors the statusbar. https://github.com/vim-airline/vim-airline
Plug 'vim-airline/vim-airline'
" Sensible defaults loaded late in configuration. https://github.com/tpope/vim-sensible
Plug 'tpope/vim-sensible'
" Adds command keys to easily add, edit, or removing bracketing content. https://github.com/tpope/vim-surround
Plug 'tpope/vim-surround'
" Git wrapper. https://github.com/tpope/vim-fugitive
Plug 'tpope/vim-fugitive'
" Streamlined navigation to navigation. https://github.com/tpope/vim-vinegar
Plug 'tpope/vim-vinegar'
" Fix limitations of the '.' command inside a plugin map. https://github.com/tpope/vim-repeat
Plug 'tpope/vim-repeat'
" Toggle comments on or off. https://github.com/tpope/vim-commentary
Plug 'tpope/vim-commentary'
" [Uninstalled] Miscellaneous pairs of command mappings. https://github.com/tpope/vim-unimpaired
"Plug 'tpope/vim-unimpaired'
" [Uninstalled] Mappings to unix CLI options like chmod, mkdir, etc. https://github.com/tpope/vim-eunuch
"Plug 'tpope/vim-eunuch'
" Nice navigable & configurable directory UI for filesystem. https://github.com/scrooloose/nerdtree
"Plug 'scrooloose/nerdtree'
" Git status integration with NERDtree. https://github.com/Xuyuanp/nerdtree-git-plugin
Plug 'Xuyuanp/nerdtree-git-plugin'
" File search utility with biases towards recently used, and other power tools. https://github.com/ctrlpvim/ctrlp.vim
Plug 'ctrlpvim/ctrlp.vim'
" Make vim a decent golang IDE. https://github.com/fatih/vim-go
Plug 'fatih/vim-go', {'for': 'go'}
" Zebra stripe indentation columns. https://github.com/nathanaelkane/vim-indent-guides
"Plug 'nathanaelkane/vim-indent-guides'
" JS enhancements, mostly syntax highlighting and folding. https://github.com/pangloss/vim-javascript
"Plug 'pangloss/vim-javascript', {'for': 'javascript'}
" [Uninstalled] VCS indicators in gutter for many version control systems.
"Plug 'mhinz/vim-signify'
" Enhanced Git indicators in gutter. https://github.com/airblade/vim-gitgutter
Plug 'airblade/vim-gitgutter'
" Snippet library system. https://github.com/mattn/emmet-vim
Plug 'mattn/emmet-vim'
" Mustache & Handlebars template support. https://github.com/mustache/vim-mustache-handlebars
Plug 'mustache/vim-mustache-handlebars'
" Ansible syntax highlighting. https://github.com/pearofducks/ansible-vim
Plug 'pearofducks/ansible-vim'
" CSS/HTML syntax highlighting. https://github.com/wavded/vim-stylus
Plug 'wavded/vim-stylus'
" Sublime-style multi-cursors. https://github.com/terryma/vim-multiple-cursors
Plug 'terryma/vim-multiple-cursors'
" Rust syntax highlighting and wrangling. https://github.com/rust-lang/rust.vim
Plug 'rust-lang/rust.vim', {'for': 'rust'}
" CSV format support. https://github.com/chrisbra/csv.vim
Plug 'chrisbra/csv.vim'
" Dockerfile. https://github.com/ekalinin/Dockerfile.vim
Plug 'ekalinin/Dockerfile.vim'
" Drupal support. https://www.drupal.org/project/vimrc
Plug 'http://git.drupal.org/project/vimrc.git', { 'branch': '7.x-1.x', 'rtp': 'bundle/vim-plugin-for-drupal' }
" Solarized colorscheme. https://github.com/altercation/vim-colors-solarized
Plug 'altercation/vim-colors-solarized'
call plug#end()

set background=dark
colorscheme solarized

" THEME/COLORS

" Make invisible chars less visible in terminal.
"autocmd vimrc ColorScheme * :hi NonText ctermfg=236
"autocmd vimrc ColorScheme * :hi SpecialKey ctermfg=236
" Show trailing whitespace.
autocmd vimrc ColorScheme * :hi ExtraWhitespace ctermbg=red guibg=red
" Make selection more visible.
autocmd vimrc ColorScheme * :hi Visual guibg=#00588A
autocmd vimrc ColorScheme * :hi link multiple_cursors_cursor Search
autocmd vimrc ColorScheme * :hi link multiple_cursors_visual Visual